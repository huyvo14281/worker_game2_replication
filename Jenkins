#!groovy
import java.text.SimpleDateFormat

node {

    // Importance Start
    def project_name = "worker-game-replication"

    def host_dev = "35.240.208.171"
    def host_prod = "34.87.1.187"

    def cpu_dev = 20
    def memory_dev = 64
    def network_mbits_dev = 20

    def cpu_prod = 40
    def memory_prod = 128
    def network_mbits_prod = 40

    def cpu
    def memory
    def network_mbits

    // Importance End
    def pool_recycle
    def db_meete_url
    def image
    def network = "meete"
    def GIT_VERSION
    def status
    def namespace
    def dateFormat = new SimpleDateFormat("yyyy.MM.dd.HHmmss")
    def date = new Date()
    def branch

    stage('Clone repository') {
        checkout scm
        GIT_VERSION = dateFormat.format(date)
        branch = env.BRANCH_NAME
        echo 'My branch is' + branch
        def msg = "Building `${env.JOB_NAME}` revision `${GIT_VERSION}` (${env.BUILD_URL})"
        echo "${msg}"
    }

    stage('Unit Test') {
        try {
            status = 'SUCCESS'
        } catch (err) {
            status = 'FAILURE'
            throw err
        }
    }

    if (branch == 'develop' || branch == 'master') {

        if (branch == 'develop') {
            branch = 'dev'
        } else if (branch == 'master') {
            branch = 'prod'
        }

        def image_tag = "${branch.replaceAll(/\//, '_')}-${GIT_VERSION}"
        echo "${image_tag}"

        stage('Build image') {

            try {
                echo "Image name: ${project_name}:${image_tag}"
                image = docker.build ("registry.meete.xyz/${project_name}:${image_tag}")
                status = 'SUCCESS'
            } catch (err) {
                status = 'FAILURE'
                throw err
            }
        }

        stage('Push image') {
            docker.withRegistry('https://registry.meete.xyz/', '29f1132a-c3ac-4264-9ab8-e520ae71df1a') {
                try {
                    image.push()
                    status = 'SUCCESS'
                } catch (err) {
                    status = 'FAILURE'
                    throw err
                }
            }
        }

        stage('Clean image') {
            sh "docker rmi registry.meete.xyz/${project_name}:${image_tag}"
        }

        def remote = [:]
        if(branch == 'dev') { // This is DEV env
            remote.name = "ubuntu"
            remote.host = host_dev // Develop
            remote.allowAnyHosts = true
            cpu = cpu_dev
            memory = memory_dev
            network_mbits = network_mbits_dev

        } else if (branch == 'prod') { // This is PROD env
            remote.name = "ubuntu"
            remote.host = host_prod // Production
            remote.allowAnyHosts = true
            cpu = cpu_prod
            memory = memory_prod
            network_mbits = network_mbits_prod
        }

        def commandPutVersion        = "/meete/consul/consul kv put ${project_name}-${branch}/version ${image_tag}"
        def commandPutCpu            = "/meete/consul/consul kv put ${project_name}-${branch}/cpu ${cpu}"
        def commandPutMemory         = "/meete/consul/consul kv put ${project_name}-${branch}/memory ${memory}"
        def commandPutNetworkMbits   = "/meete/consul/consul kv put ${project_name}-${branch}/network-mbits ${network_mbits}"

        def commandSleep60s          = "sleep 60"
        def commandCheckVersion      = "cat /meete/nomad/${project_name}.nomad | grep ${image_tag}"
        def commandStartNomad        = "/meete/nomad/nomad job run /meete/nomad/${project_name}.nomad"

        stage("SSH Deploy on ${branch}!") {
            withCredentials([sshUserPrivateKey(credentialsId: 'ssh-key', keyFileVariable: 'identity', passphraseVariable: '', usernameVariable: 'ubuntu')]) {
                remote.user = "ubuntu"
                remote.identityFile = identity
                sshCommand remote: remote, command: commandPutVersion
                sshCommand remote: remote, command: commandPutCpu
                sshCommand remote: remote, command: commandPutMemory
                sshCommand remote: remote, command: commandPutNetworkMbits
                sshCommand remote: remote, command: commandSleep60s
                sshCommand remote: remote, command: commandCheckVersion
                sshCommand remote: remote, command: commandStartNomad
            }
        }
    }
}
